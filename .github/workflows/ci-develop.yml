name: Develop Pipeline

on:
  push:
    branches: [ develop ]
  pull_request:
    branches: [ develop ]

jobs:
  # ───────────────────────────────────────────── FRONTEND ─────────────────────────────────────────────

  frontend-install-and-cache:
    runs-on: ubuntu-latest
    needs: security-scan-frontend
    outputs:
      cache-hit: ${{ steps.cache-npm.outputs.cache-hit }}
    steps:
      - uses: actions/checkout@v4

      - name: Cache node modules
        id: cache-npm
        uses: actions/cache@v3
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

  frontend-lint:
    runs-on: ubuntu-latest
    needs: frontend-install-and-cache
    steps:
      - uses: actions/checkout@v4

      - name: Restore node_modules cache
        uses: actions/cache@v3
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}

      - name: Run lint
        working-directory: ./frontend
        run: npm run lint

  frontend-test:
    runs-on: ubuntu-latest
    needs: frontend-lint
    steps:
      - uses: actions/checkout@v4

      - name: Restore node_modules cache
        uses: actions/cache@v3
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}

      - name: Run tests
        working-directory: ./frontend
        run: npm run test:cicd

  frontend-build:
    runs-on: ubuntu-latest
    needs: frontend-test
    steps:
      - uses: actions/checkout@v4

      - name: Restore node_modules cache
        uses: actions/cache@v3
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}

      - name: Build frontend
        working-directory: ./frontend
        run: npm run build:prod

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/dist

  backend-install:
    needs: [security-scan-backend]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle
          cache-dependency-path: backend/build.gradle
      - name: Grant permission to gradlew
        working-directory: ./backend
        run: chmod +x gradlew

  backend-build:
    needs: backend-install
    runs-on: ubuntu-latest
    environment: f1-world-champions
    steps:
      - uses: actions/checkout@v4
      - name: Build backend
        working-directory: ./backend
        run: ./gradlew build --no-daemon
        env:
          SPRING_PROFILES_ACTIVE: prod
          MYSQL_HOST: ${{ secrets.MYSQL_HOST }}
          MYSQL_PORT: ${{ secrets.MYSQL_PORT }}
          MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
          MYSQL_USER: ${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
          REDIS_HOST: ${{ secrets.REDIS_HOST }}
          REDIS_PORT: ${{ secrets.REDIS_PORT }}
          REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
      - name: Upload backend build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-build
          path: backend/build/libs
          retention-days: 7
  # ───────────────────────────────────────────── E2E TESTS ─────────────────────────────────────────────

  e2e:
    needs: [ frontend-test, backend-build ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Build frontend
        working-directory: ./frontend
        run: npm run build:prod

      - name: Install static server
        run: npm install -g serve

      - name: Serve frontend
        working-directory: ./frontend
        run: |
          npx serve -s dist/f1-app/browser -l 4200 > frontend.log 2>&1 &

      - name: Wait for frontend to be ready
        run: |
          timeout 120 bash -c 'until curl -s http://localhost:4200 > /dev/null; do echo "Waiting for frontend..."; sleep 2; done'

      - name: Run E2E tests
        working-directory: ./frontend
        env:
          CYPRESS_baseUrl: http://localhost:4200
        run: npm run e2e:headless

      - name: Print frontend logs if needed
        if: failure()
        run: cat ./frontend/frontend.log || true


  # ───────────────────────────────────────────── SECURITY SCANS ─────────────────────────────────────────────

  security-scan-backend:
    runs-on: ubuntu-latest
    environment: f1-world-champions
    steps:
      - uses: actions/checkout@v3
      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-
      - name: Cache Dependency-Check NVD database
        uses: actions/cache@v4
        with:
          path: ~/.dependency-check
          key: owasp-nvd-${{ runner.os }}
          restore-keys: |
            owasp-nvd-${{ runner.os }}
      - name: Run OWASP Dependency Check
        working-directory: ./backend
        env:
          NVD_API_KEY: ${{ secrets.NVD_API_KEY }}
        run: ./gradlew dependencyCheckAnalyze --info

  security-scan-frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run npm audit
        working-directory: ./frontend
        run: |
          npm ci
          npm audit --json > audit-report.json || true