name: Combined CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  MYSQL_HOST: ${{ secrets.MYSQL_HOST }}
  MYSQL_PORT: ${{ secrets.MYSQL_PORT }}
  MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
  MYSQL_USER: root
  MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
  MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
  REDIS_HOST: redis.railway.internal
  REDIS_PORT: 6379
  NODE_ENV: production
  API_URL: http://localhost:8080

jobs:
  frontend:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci
    
    - name: Frontend lint
      working-directory: ./frontend
      run: npm run lint
    
    - name: Frontend unit tests
      working-directory: ./frontend
      run: npm run test -- --watch=false --browsers=ChromeHeadless
    
    - name: Frontend build
      working-directory: ./frontend
      run: npm run build -- --configuration=production

    - name: Upload frontend build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: frontend/dist
        retention-days: 7

  backend:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up JDK
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: gradle
        cache-dependency-path: backend/build.gradle

    - name: Grant execute permission for gradlew
      working-directory: ./backend
      run: chmod +x gradlew

    - name: Backend build
      working-directory: ./backend
      run: ./gradlew build --no-daemon
      env:
        SPRING_PROFILES_ACTIVE: prod
        MYSQL_HOST: ${{ secrets.MYSQL_HOST }}
        MYSQL_PORT: ${{ secrets.MYSQL_PORT }}
        MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
        MYSQL_USER: ${{ secrets.MYSQL_USER }}
        MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
        REDIS_HOST: ${{ secrets.REDIS_HOST }}
        REDIS_PORT: ${{ secrets.REDIS_PORT }}
        REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}

    - name: Upload backend build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: backend-build
        path: backend/build/libs
        retention-days: 7

  e2e:
    needs: [frontend, backend]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Start backend
      working-directory: ./backend
      run: ./gradlew bootRun &
      env:
        SPRING_PROFILES_ACTIVE: prod
        MYSQL_HOST: ${{ secrets.MYSQL_HOST }}
        MYSQL_PORT: ${{ secrets.MYSQL_PORT }}
        MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
        MYSQL_USER: ${{ secrets.MYSQL_USER }}
        MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
        REDIS_HOST: ${{ secrets.REDIS_HOST }}
        REDIS_PORT: ${{ secrets.REDIS_PORT }}
        REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}

    - name: Wait for backend to start
      run: |
        timeout 60 bash -c 'until curl -s http://localhost:8080/actuator/health | grep -q "UP"; do sleep 2; done'

    - name: Run E2E tests
      working-directory: ./frontend
      run: npm run e2e:headless
      env:
        API_URL: http://localhost:8080

  security-scan:
    needs: [frontend, backend]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Run OWASP Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'F1 Champions App'
        path: '.'
        format: 'HTML'
        out: 'reports'

    - name: Upload security report
      uses: actions/upload-artifact@v4
      with:
        name: security-report
        path: reports
        retention-days: 7

  notify:
    needs: [frontend, backend, e2e, security-scan]
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Notify on failure
      if: failure()
      uses: actions/github-script@v7
      with:
        script: |
          const { owner, repo } = context.repo;
          const run_id = context.runId;
          const run_url = `https://github.com/${owner}/${repo}/actions/runs/${run_id}`;
          
          github.rest.issues.create({
            owner,
            repo,
            title: `CI Pipeline Failed - Run #${run_id}`,
            body: `The CI pipeline has failed. Please check the [run details](${run_url}) for more information.`
          }); 
