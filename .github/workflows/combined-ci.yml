name: Combined CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  MYSQL_HOST: ${{ secrets.MYSQL_HOST }}
  MYSQL_PORT: ${{ secrets.MYSQL_PORT }}
  MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
  MYSQL_USER: root
  MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
  MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
  REDIS_HOST: ${{ secrets.REDIS_HOST }}
  REDIS_PORT: ${{ secrets.REDIS_PORT }}
  REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}

jobs:
  frontend:
    needs: [security-scan-frontend]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Check frontend folder contents
      run: ls -l ./frontend
    
    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
    
    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm install
    
    - name: Frontend lint
      working-directory: ./frontend
      run: npm run lint
    
    - name: Frontend unit tests
      working-directory: ./frontend
      run: npm run test:cicd
    
    - name: Frontend build
      working-directory: ./frontend
      run: npm run build:prod

    - name: Upload frontend build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: frontend/dist
        retention-days: 7

  backend:
    needs: [security-scan-backend]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up JDK
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: gradle
        cache-dependency-path: backend/build.gradle

    - name: Grant execute permission for gradlew
      working-directory: ./backend
      run: chmod +x gradlew

    - name: Backend build
      working-directory: ./backend
      run: ./gradlew build --no-daemon
      env:
        SPRING_PROFILES_ACTIVE: prod
        MYSQL_HOST: ${MYSQL_HOST}
        MYSQL_PORT: ${MYSQL_PORT}
        MYSQL_DATABASE: ${MYSQL_DATABASE}
        MYSQL_USER: ${MYSQL_USER}
        MYSQL_PASSWORD: ${MYSQL_PASSWORD}
        REDIS_HOST: ${REDIS_HOST}
        REDIS_PORT: ${REDIS_PORT}
        REDIS_PASSWORD: ${REDIS_PASSWORD}

    - name: Upload backend build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: backend-build
        path: backend/build/libs
        retention-days: 7

  e2e:
    needs: [frontend]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'

    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Build frontend
      working-directory: ./frontend
      run: npm run build:prod

    - name: Install static server
      run: npm install -g serve

    - name: Serve frontend
      working-directory: ./frontend
      run: |
        npm start > frontend.log 2>&1 &

    - name: Wait for frontend to be ready
      run: |
        timeout 60 bash -c 'until curl -s http://localhost:4200 > /dev/null; do sleep 2; done'

    - name: Run E2E tests
      working-directory: ./frontend
      env:
        CYPRESS_baseUrl: http://localhost:4200
      run: npm run e2e:headless

  security-scan-backend:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Run OWASP Dependency Check via Gradle
      working-directory: ./backend
      run: ./gradlew dependencyCheckAnalyze

  security-scan-frontend:
      runs-on: ubuntu-latest
      steps:
      - uses: actions/checkout@v4

      - name: Run npm audit on frontend
        working-directory: ./frontend
        run: |
          npm ci
          npm audit --json > audit-report.json || true

  notify:
    needs: [backend, e2e]
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Notify on failure
      if: failure()
      uses: actions/github-script@v7
      with:
        script: |
          const { owner, repo } = context.repo;
          const run_id = context.runId;
          const run_url = `https://github.com/${owner}/${repo}/actions/runs/${run_id}`;
          
          github.rest.issues.create({
            owner,
            repo,
            title: `CI Pipeline Failed - Run #${run_id}`,
            body: `The CI pipeline has failed. Please check the [run details](${run_url}) for more information.`
          }); 
